{"ast":null,"code":"class Api {\n  constructor({\n    url,\n    headers\n  }) {\n    this._getResponseData = res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`ERROR: ${res.status}`);\n    };\n\n    this._url = url;\n    this._headers = headers;\n  }\n\n  getUser() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  getCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  updateUserInfo(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: `${data.name}`,\n        about: `${data.about}`\n      })\n    }).then(this._getResponseData);\n  }\n\n  saveNewCard({\n    name,\n    url\n  }) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: url\n      })\n    }).then(this._getResponseData);\n  }\n\n  newAvatar(url) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: url\n      })\n    }).then(this._getResponseData);\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._url}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  likeCard(id) {\n    return fetch(`${this._url}/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  likeCardCancel(id) {\n    return fetch(`${this._url}/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._getResponseData);\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (!isLiked) {\n      return this.likeCardCancel(id);\n    } else {\n      return this.likeCard(id);\n    }\n  }\n\n}\n\nconst api = new Api({\n  url: 'https://mesto.nomoreparties.co/v1/cohort-24',\n  headers: {\n    authorization: 'be87e10d-5f50-49e4-a06f-5cefb6b5b607',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/satan/praktikum/mesto-react/src/utils/api.js"],"names":["Api","constructor","url","headers","_getResponseData","res","ok","json","Promise","reject","status","_url","_headers","getUser","fetch","then","getCards","updateUserInfo","data","method","body","JSON","stringify","name","about","saveNewCard","link","newAvatar","avatar","deleteCard","id","likeCard","likeCardCancel","changeLikeCardStatus","isLiked","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n    constructor({url, headers}) {\n        this._url = url;\n        this._headers = headers;\n    }\n\n    _getResponseData = (res) => {\n        if (res.ok) {\n            return res.json()\n        }\n        return Promise.reject(`ERROR: ${res.status}`)\n    }\n\n    getUser() {\n        return fetch(`${this._url}/users/me`, {\n            headers: this._headers\n        })\n            .then(this._getResponseData)\n\n    }\n\n    getCards() {\n        return fetch(`${this._url}/cards`, {\n            headers: this._headers\n        })\n            .then(this._getResponseData)\n    }\n\n    updateUserInfo(data) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: `${data.name}`,\n                about: `${data.about}`\n            })\n        })\n            .then(this._getResponseData)\n    }\n\n    saveNewCard({name, url}) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: name,\n                link: url\n            })\n        })\n            .then(this._getResponseData)\n    }\n\n    newAvatar(url) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: url,\n            })\n        })\n            .then(this._getResponseData)\n    }\n\n    deleteCard(id) {\n        return fetch(`${this._url}/cards/${id}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n            .then(this._getResponseData)\n    }\n\n\n    likeCard(id) {\n        return fetch(`${this._url}/cards/likes/${id}`, {\n            method: 'PUT',\n            headers: this._headers\n        })\n            .then(this._getResponseData)\n    }\n\n\n    likeCardCancel(id) {\n        return fetch(`${this._url}/cards/likes/${id}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n            .then(this._getResponseData)\n    }\n\n    changeLikeCardStatus(id, isLiked) {\n        if (!isLiked) {\n            return this.likeCardCancel(id)\n        } else {\n            return this.likeCard(id)\n        }\n    }\n}\n\n    const api = new Api({\n    url: 'https://mesto.nomoreparties.co/v1/cohort-24',\n    headers: {\n        authorization: 'be87e10d-5f50-49e4-a06f-5cefb6b5b607',\n        'Content-Type': 'application/json'\n    }\n});\nexport default api"]},"metadata":{},"sourceType":"module"}